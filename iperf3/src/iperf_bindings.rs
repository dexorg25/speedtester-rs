/* automatically generated by rust-bindgen 0.60.1 */
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]
#![allow(clippy::items_after_statements)]
#![allow(clippy::use_self)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::used_underscore_binding)]

pub type size_t = ::std::os::raw::c_ulong;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    fn test_field__flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
    }
    test_field__flags();
    fn test_field__IO_read_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
    }
    test_field__IO_read_ptr();
    fn test_field__IO_read_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
    }
    test_field__IO_read_end();
    fn test_field__IO_read_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
    }
    test_field__IO_read_base();
    fn test_field__IO_write_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
    }
    test_field__IO_write_base();
    fn test_field__IO_write_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
    }
    test_field__IO_write_ptr();
    fn test_field__IO_write_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
    }
    test_field__IO_write_end();
    fn test_field__IO_buf_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
    }
    test_field__IO_buf_base();
    fn test_field__IO_buf_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
    }
    test_field__IO_buf_end();
    fn test_field__IO_save_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
    }
    test_field__IO_save_base();
    fn test_field__IO_backup_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
    }
    test_field__IO_backup_base();
    fn test_field__IO_save_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
    }
    test_field__IO_save_end();
    fn test_field__markers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
    }
    test_field__markers();
    fn test_field__chain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
    }
    test_field__chain();
    fn test_field__fileno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
    }
    test_field__fileno();
    fn test_field__flags2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
    }
    test_field__flags2();
    fn test_field__old_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
    }
    test_field__old_offset();
    fn test_field__cur_column() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
    }
    test_field__cur_column();
    fn test_field__vtable_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize
            },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
    }
    test_field__vtable_offset();
    fn test_field__shortbuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize
            },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
    }
    test_field__shortbuf();
    fn test_field__lock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
    }
    test_field__lock();
    fn test_field__offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
    }
    test_field__offset();
    fn test_field__codecvt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_codecvt)
            )
        );
    }
    test_field__codecvt();
    fn test_field__wide_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_wide_data)
            )
        );
    }
    test_field__wide_data();
    fn test_field__freeres_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_list)
            )
        );
    }
    test_field__freeres_list();
    fn test_field__freeres_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_buf)
            )
        );
    }
    test_field__freeres_buf();
    fn test_field___pad5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
    }
    test_field___pad5();
    fn test_field__mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
    }
    test_field__mode();
    fn test_field__unused2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    test_field__unused2();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iperf_test {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iperf_stream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iperf_time {
    _unused: [u8; 0],
}
pub type iperf_size_t = u64;
extern "C" {
    pub fn iperf_get_verbose(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_control_socket(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_omit(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_duration(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_role(ipt: *mut iperf_test) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn iperf_get_test_reverse(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_blksize(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_rate(ipt: *mut iperf_test) -> u64;
}
extern "C" {
    pub fn iperf_get_test_pacing_timer(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_bytes(ipt: *mut iperf_test) -> u64;
}
extern "C" {
    pub fn iperf_get_test_blocks(ipt: *mut iperf_test) -> u64;
}
extern "C" {
    pub fn iperf_get_test_burst(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_socket_bufsize(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_reporter_interval(ipt: *mut iperf_test) -> f64;
}
extern "C" {
    pub fn iperf_get_test_stats_interval(ipt: *mut iperf_test) -> f64;
}
extern "C" {
    pub fn iperf_get_test_num_streams(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_repeating_payload(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_timestamps(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_timestamp_format(ipt: *mut iperf_test) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn iperf_get_test_server_port(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_server_hostname(ipt: *mut iperf_test) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn iperf_get_test_template(ipt: *mut iperf_test) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn iperf_get_test_protocol_id(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_json_output(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_json_output_string(ipt: *mut iperf_test) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn iperf_get_test_zerocopy(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_get_server_output(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_unit_format(ipt: *mut iperf_test) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn iperf_get_test_bind_address(ipt: *mut iperf_test) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn iperf_get_test_udp_counters_64bit(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_one_off(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_tos(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_extra_data(ipt: *mut iperf_test) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn iperf_get_iperf_version() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn iperf_get_test_no_delay(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_connect_timeout(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_dont_fragment(ipt: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_get_test_congestion_control(ipt: *mut iperf_test) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn iperf_set_verbose(ipt: *mut iperf_test, verbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_control_socket(ipt: *mut iperf_test, ctrl_sck: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_omit(ipt: *mut iperf_test, omit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_duration(ipt: *mut iperf_test, duration: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_reporter_interval(ipt: *mut iperf_test, reporter_interval: f64);
}
extern "C" {
    pub fn iperf_set_test_stats_interval(ipt: *mut iperf_test, stats_interval: f64);
}
extern "C" {
    pub fn iperf_set_test_state(ipt: *mut iperf_test, state: ::std::os::raw::c_schar);
}
extern "C" {
    pub fn iperf_set_test_blksize(ipt: *mut iperf_test, blksize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_logfile(ipt: *mut iperf_test, logfile: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn iperf_set_test_rate(ipt: *mut iperf_test, rate: u64);
}
extern "C" {
    pub fn iperf_set_test_pacing_timer(ipt: *mut iperf_test, pacing_timer: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_bytes(ipt: *mut iperf_test, bytes: u64);
}
extern "C" {
    pub fn iperf_set_test_blocks(ipt: *mut iperf_test, blocks: u64);
}
extern "C" {
    pub fn iperf_set_test_burst(ipt: *mut iperf_test, burst: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_server_port(ipt: *mut iperf_test, server_port: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_socket_bufsize(
        ipt: *mut iperf_test,
        socket_bufsize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn iperf_set_test_num_streams(ipt: *mut iperf_test, num_streams: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_repeating_payload(
        ipt: *mut iperf_test,
        repeating_payload: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn iperf_set_test_timestamps(ipt: *mut iperf_test, timestamps: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_timestamp_format(
        arg1: *mut iperf_test,
        tf: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn iperf_set_test_role(ipt: *mut iperf_test, role: ::std::os::raw::c_char);
}
extern "C" {
    pub fn iperf_set_test_server_hostname(
        ipt: *mut iperf_test,
        server_hostname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn iperf_set_test_template(
        ipt: *mut iperf_test,
        tmp_template: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn iperf_set_test_reverse(ipt: *mut iperf_test, reverse: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_json_output(ipt: *mut iperf_test, json_output: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_has_zerocopy() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_set_test_zerocopy(ipt: *mut iperf_test, zerocopy: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_get_server_output(
        ipt: *mut iperf_test,
        get_server_output: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn iperf_set_test_unit_format(ipt: *mut iperf_test, unit_format: ::std::os::raw::c_char);
}
extern "C" {
    pub fn iperf_set_test_bind_address(
        ipt: *mut iperf_test,
        bind_address: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn iperf_set_test_udp_counters_64bit(
        ipt: *mut iperf_test,
        udp_counters_64bit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn iperf_set_test_one_off(ipt: *mut iperf_test, one_off: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_tos(ipt: *mut iperf_test, tos: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_extra_data(ipt: *mut iperf_test, dat: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn iperf_set_test_bidirectional(ipt: *mut iperf_test, bidirectional: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_no_delay(ipt: *mut iperf_test, no_delay: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_dont_fragment(ipt: *mut iperf_test, dont_fragment: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iperf_set_test_congestion_control(ipt: *mut iperf_test, cc: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn iperf_set_test_connect_timeout(ipt: *mut iperf_test, ct: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " exchange_parameters - handles the param_Exchange part for client"]
    #[doc = ""]
    pub fn iperf_exchange_parameters(test: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " iperf_stats_callback -- handles the statistic gathering"]
    #[doc = ""]
    pub fn iperf_stats_callback(test: *mut iperf_test);
}
extern "C" {
    #[doc = " iperf_reporter_callback -- handles the report printing"]
    #[doc = ""]
    pub fn iperf_reporter_callback(test: *mut iperf_test);
}
extern "C" {
    #[doc = " iperf_new_test -- return a new iperf_test with default values"]
    #[doc = ""]
    #[doc = " returns NULL on failure"]
    #[doc = ""]
    pub fn iperf_new_test() -> *mut iperf_test;
}
extern "C" {
    pub fn iperf_defaults(testp: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " iperf_free_test -- free resources used by test, calls iperf_free_stream to"]
    #[doc = " free streams"]
    #[doc = ""]
    pub fn iperf_free_test(testp: *mut iperf_test);
}
extern "C" {
    #[doc = " iperf_new_stream -- return a net iperf_stream with default values"]
    #[doc = ""]
    #[doc = " returns NULL on failure"]
    #[doc = ""]
    pub fn iperf_new_stream(
        arg1: *mut iperf_test,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut iperf_stream;
}
extern "C" {
    #[doc = " iperf_add_stream -- add a stream to a test"]
    #[doc = ""]
    pub fn iperf_add_stream(test: *mut iperf_test, stream: *mut iperf_stream);
}
extern "C" {
    #[doc = " iperf_init_stream -- init resources associated with test"]
    #[doc = ""]
    pub fn iperf_init_stream(
        arg1: *mut iperf_stream,
        arg2: *mut iperf_test,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " iperf_free_stream -- free resources associated with test"]
    #[doc = ""]
    pub fn iperf_free_stream(sp: *mut iperf_stream);
}
extern "C" {
    pub fn iperf_set_send_state(
        test: *mut iperf_test,
        state: ::std::os::raw::c_schar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_check_throttle(sp: *mut iperf_stream, nowP: *mut iperf_time);
}
extern "C" {
    pub fn iperf_catch_sigend(
        handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    );
}
extern "C" {
    pub fn iperf_got_sigend(test: *mut iperf_test);
}
extern "C" {
    pub fn iperf_exchange_results(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_init_test(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_create_send_timers(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_parse_arguments(
        arg1: *mut iperf_test,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_open_logfile(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_reset_test(arg1: *mut iperf_test);
}
extern "C" {
    pub fn iperf_reset_stats(test: *mut iperf_test);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protocol {
    _unused: [u8; 0],
}
extern "C" {
    pub fn get_protocol(arg1: *mut iperf_test, arg2: ::std::os::raw::c_int) -> *mut protocol;
}
extern "C" {
    pub fn set_protocol(
        arg1: *mut iperf_test,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_on_new_stream(arg1: *mut iperf_stream);
}
extern "C" {
    pub fn iperf_on_test_start(arg1: *mut iperf_test);
}
extern "C" {
    pub fn iperf_on_connect(arg1: *mut iperf_test);
}
extern "C" {
    pub fn iperf_on_test_finish(arg1: *mut iperf_test);
}
extern "C" {
    pub fn iperf_run_client(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_connect(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_create_streams(
        arg1: *mut iperf_test,
        sender: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_handle_message_client(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_client_end(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_run_server(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_server_listen(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_accept(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_handle_message_server(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_create_pidfile(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_delete_pidfile(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_check_total_rate(arg1: *mut iperf_test, arg2: iperf_size_t);
}
extern "C" {
    pub fn iperf_json_start(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_json_finish(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_setaffinity(
        arg1: *mut iperf_test,
        affinity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_clearaffinity(arg1: *mut iperf_test) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_printf(
        test: *mut iperf_test,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iperf_err(test: *mut iperf_test, format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn iperf_errexit(test: *mut iperf_test, format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn iperf_strerror(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
